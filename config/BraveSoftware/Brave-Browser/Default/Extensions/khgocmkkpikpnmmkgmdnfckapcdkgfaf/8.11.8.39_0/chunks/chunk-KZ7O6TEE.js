
!function(){try{var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},n=(new Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]="5d70a455-9b21-5e39-9d37-fbe39b76a655")}catch(e){}}();
import{a as w}from"/chunks/chunk-OK4UQCTS.js";import{P as b,b as L,l as y,n as v}from"/chunks/chunk-UC3RRRGX.js";var h=s=>{let[e]=s.split("?");return`PortOpener: ${e}`},k=(s,e,n)=>{let t=x(s,e);return e?.reconnect&&$(t,n),t},x=(s,e,n)=>S(s,e||{},n),S=(s,e,n)=>{let{port:t,portId:r}=D(s,e,n),i=h(t.name);`${i}`;let c=I(t);t.onMessage.addListener(c);let l=()=>{t.onMessage.removeListener(c),t.onDisconnect.removeListener(l)};t.onDisconnect.addListener(l);let g=new WeakMap;return{name:`${s.toString()}/${r.toString()}`,disconnect:t.disconnect,postMessage:a=>{`${i}${a.type}`,t.postMessage(a)},onMessage:{addListener:a=>{let d=(o,p)=>{o.type!=="pm-health-check-request"&&a(o,p.name)};t.onMessage.addListener(d),g.set(a,d)},removeListener:a=>{let d=g.get(a);t.onMessage.removeListener(d),g.delete(a)}},onDisconnect:{addListener:a=>{t.onDisconnect.addListener(a)},removeListener:a=>{t.onDisconnect.removeListener(a)}},getConfig:()=>({id:r,reqId:e.reqId,type:s})}},$=(s,e)=>{let n=h(s.name),t=new Map,r=new Map,i={...s.onMessage},c={...s.onDisconnect},l=o=>{`${n}`,i.addListener(o),t.set(o,o)},g=o=>{`${n}`,i.removeListener(o),t.delete(o)},f=o=>{`${n}`,c.addListener(o),r.set(o,o)},a=o=>{`${n}`,c.removeListener(o),r.delete(o)},d=o=>{if(!o.persisted)return;window.removeEventListener("pageshow",d),`${n}`;let p=s.getConfig(),u=x(p.type,{reconnect:!0,reqId:p.reqId},p.id);$(u,e);for(let m of t.keys())s.onMessage.removeListener(m),u.onMessage.addListener(m);for(let m of r.keys())s.onDisconnect.removeListener(m),u.onDisconnect.addListener(m);e?.(u)};s.onMessage.addListener=l,s.onMessage.removeListener=g,s.onDisconnect.addListener=f,s.onDisconnect.removeListener=a,window.addEventListener("pageshow",d)},D=(s,e,n)=>{let t=b(),r={};e.reqId&&(r.reqId=e.reqId.str),e.reconnect&&(r.reconnect=`${e.reconnect}`),n&&(r.reconnectId=n.str);let i="?"+new URLSearchParams(r).toString();return{port:chrome.runtime.connect({name:`${s.str}/${t.str}${i.length>1?i:""}`}),portId:t}},I=s=>e=>{let n=h(s.name);if(e.type==="error"){console.warn(`${n} received error: "${e.data.loggableReason}"`);return}if(e.type!=="pm-health-check-request"){`${n}${e.type}`;return}if(e.type==="pm-health-check-request"){`${n}${e.type}`,s.postMessage({type:"pm-health-check-response",data:{windowClosed:window.closed,id:e.data.id}});return}L(e,v`message`)};var P=class{constructor(e=""){this.log=(e,...n)=>{this.isPermitted()&&(this.message(e),[...n])};this.debug=(e,...n)=>{this.isPermitted()&&(this.message(e),[...n])};this.info=(e,...n)=>{this.isPermitted()&&console.info(this.message(e),...n)};this.warn=(e,...n)=>{this.isPermitted()&&console.warn(this.message(e),...n)};this.error=(e,...n)=>{this.isPermitted()&&console.error(this.message(e),...n)};this.isPermitted=()=>!1;this.message=e=>this._prependMessage?`${this._prependMessage}: ${e}`:e;this._prependMessage=e}};function q(s){try{return s?.useChrome||browser?.runtime===void 0?async e=>R(e):async e=>browser.runtime.sendMessage(e)}catch{return async n=>R(n)}}async function T(s,e){let t=await q(e)(s).catch(r=>{let i=r instanceof Error?r.message:String(r);if(i.includes("Receiving end does not exist"))`${s.name}`;else if(i.includes("The message port closed"))`${s.name}`;else if(!i)`${s.name}`;else throw new Error(`Unhandled error response received for message <${s.name}>`)});if(w(t))switch(t.type){case"Success":return t.data;case"Error":throw new Error(t.message??`Error response received for message <${s.name}>`)}if(t)throw new Error(`Unknown response type received for message <${s.name}>`);return t}async function R(s){return new Promise((e,n)=>{chrome.runtime.sendMessage(s,t=>{if(t?.type==="Success")e(t);else{let r=chrome.runtime.lastError;n(new Error(r?.message))}})})}var M=class{constructor(e){this.request=async e=>T(e);this.setupRegisteredHandler=(e,n)=>{function t(r,i,c){if(r.name&&r.name===e){let l=new P("WebExtListener handler registration");return new Promise(g=>g(n(r.data))).then(c).catch(g=>{console.warn(`Caught error handling <${r.name}> message`),l.error(g)}),!0}return!1}return t};this.on=(e,n)=>{let t=this.setupRegisteredHandler(e,n);return this.registeredHandlers=this.registeredHandlers??[],this.registeredHandlers.push(t),chrome.runtime.onMessage.addListener(t),t};this.setupPort=e=>{this.port=k(y.assertLogSafe(e),{reconnect:!0},this.onPortReconnect),this.port.onMessage.addListener(this.onPortMessage)};this.onPortReconnect=e=>{this.port=e};this.onPortMessage=({type:e,data:n})=>{if(e!=="targeted-inline-message")return;(this.registeredHandlers??[]).forEach(r=>{let i=()=>{`${n.message.name}`};r(n.message,void 0,i)})};this.off=(e,n)=>{chrome.runtime.onMessage.removeListener(n)};e&&(this.portType=e,this.setupPort(e),this.registeredHandlers=[])}};function z(s,e={targetParent:!1}){return{name:"relay-message-to-frames",data:{message:JSON.stringify(s),targetParent:e.targetParent}}}function G(s){return new M(s)}export{k as a,z as b,G as c};

//# debugId=5d70a455-9b21-5e39-9d37-fbe39b76a655
